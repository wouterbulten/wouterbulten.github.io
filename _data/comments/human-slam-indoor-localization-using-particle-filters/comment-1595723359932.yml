_id: 0b6dfef0-ced7-11ea-b64c-db9e97611665
replying_to: ''
slug: human-slam-indoor-localization-using-particle-filters
name: boris
email: 0a98f895bade3702aa16a90be9bd41b7
message: "here is my code, can you please explain me, what ist dies 0.008 and 0.1 ?\r\n\r\n\"\"\"\r\nDescription\r\n-----------\r\nSimple Implementation of the Kalman Filter for 1D data, without any dependencies\r\nOriginally written in JavaScript by Wouter Bulten\r\nNow rewritten in Python\r\nLicense\r\n-------\r\nMIT License\r\n2017\r\nAuthor\r\n------\r\nSifan Ye\r\nSee\r\n---\r\nhttps://github.com/wouterbulten/kalmanjs\r\n    \r\n\"\"\"\r\n\r\nimport math\r\n\r\nclass KalmanFilter:\r\n\r\n    cov = float('nan')\r\n    x = float('nan')\r\n\r\n    def __init__(self, R, Q):\r\n        \"\"\"\r\n        Constructor\r\n        :param R: Process Noise\r\n        :param Q: Measurement Noise\r\n        \"\"\"\r\n        self.A = 1\r\n        self.B = 0\r\n        self.C = 1\r\n\r\n        self.R = R\r\n        self.Q = Q\r\n\r\n    def filter(self, measurement):\r\n        \"\"\"\r\n        Filters a measurement\r\n        :param measurement: The measurement value to be filtered\r\n        :return: The filtered value\r\n        \"\"\"\r\n        u = 0\r\n        if math.isnan(self.x):\r\n            self.x = (1 / self.C) * measurement\r\n            self.cov = (1 / self.C) * self.Q * (1 / self.C)\r\n        else:\r\n            predX = (self.A * self.x) + (self.B * u)\r\n            predCov = ((self.A * self.cov) * self.A) + self.R\r\n\r\n            # Kalman Gain\r\n            K = predCov * self.C * (1 / ((self.C * predCov * self.C) + self.Q));\r\n\r\n            # Correction\r\n            self.x = predX + K * (measurement - (self.C * predX));\r\n            self.cov = predCov - (K * self.C * predCov);\r\n\r\n        return self.x\r\n\r\n    def last_measurement(self):\r\n        \"\"\"\r\n        Returns the last measurement fed into the filter\r\n        :return: The last measurement fed into the filter\r\n        \"\"\"\r\n        return self.x\r\n\r\n    def set_measurement_noise(self, noise):\r\n        \"\"\"\r\n        Sets measurement noise\r\n        :param noise: The new measurement noise\r\n        \"\"\"\r\n        self.Q = noise\r\n\r\n    def set_process_noise(self, noise):\r\n        \"\"\"\r\n        Sets process noise\r\n        :param noise: The new process noise\r\n        \"\"\"\r\n        self.R = noise\r\n\r\nif __name__ == '__main__':\r\n    \r\n    test = KalmanFilter(0.008, 0.1)\r\n    testData = [66,64,63,63,63,66,65,67,58]\r\n    for x in testData:\r\n        print (\"Data:\", x)\r\n        print (\"Filtered Data: \", test.filter(x))\r\n\r\n\r\nis all Result Data now correct and can i use it for distance calculated ?"
id: 1595723359
date: '2020-07-26T00:29:19.926Z'
